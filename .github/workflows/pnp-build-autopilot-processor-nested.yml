name: Merge to master 

on:
  workflow_call:
    secrets:
      SECRET_AUTH:
        required: true
      GCLOUD_AUTH_STAGING:
        required: true        
    inputs:
      GCR_image_name:
        description: 'A name of the image to be created in GCR'
        required: true
        type: string
      path-to-pom:
        description: 'Path to the pom file'
        required: true
        type: string
      path-to-dockerfile:
        description: 'Path to dockerfile which builds the service.'
        required: true
        type: string
      slack-channel:
        description: 'A slack channel which needs to be notified in case of failure'
        required: false
        type: string
      pact-application-id:
        required: false
        type: string
      pact-webhook-id:
        required: false
        type: string
      working-directory:
        description: 'working directory'
        required: false
        type: string
      service-definition:
        description: 'Path to kubernetes config file.'
        type: string
        required: true
      release-version:
        description: 'deploy release version'
        type: boolean
        required: false
        default: false
      jdk-distribution:
        description: 'JDK Distribution name'
        type: string
        required: false
        default: 'temurin'
      java-version:
        description: 'Java version used in the project'
        type: string
        required: false
        default: '17'
      use-old-setup-java:
        description: 'If true uses the java setup step of version 1'
        type: boolean
        required: false
        default: false
      do-pact-consumer-tests:
        description: 'If true runs tests defining data contracts'
        type: boolean
        required: false
        default: false
      do-pact-provider-tests:
        description: 'If true runs tests verifying implementation against data-contracts'
        type: boolean
        required: false
        default: false
      is-pact-consumer-can-i-deploy-dry-run:
        description: 'If true, consumer can-i-deploy step will be executed in dry-run mode'
        type: boolean
        required: false
        default: false
      is-pact-provider-can-i-deploy-dry-run:
        description: 'If true, provider can-i-deploy step will be executed in dry-run mode'
        type: boolean
        required: false
        default: false
      path-to-pact-tests:
        description: 'Path to pact test directory.'
        type: string
        required: false
        default: 'target/pacts'
      reuse-release:
        description: 'If true, instead of creating new release reuses the current one. Intended to be used in config-based multi-service deploy scenarios, when multiple service instances created from the same code base.'
        type: boolean
        required: false
        default: false
      tag-prefix:
        description: 'Release tag prefix. Must be provided in case of multiple projects in the same repository. Each project needs to have its own prefix. Use {service-prefix}-v format.'
        type: string
        required: false
        default: 'v'
      native-image:
        description: 'If true uses the GraalVm to compile app'
        type: boolean
        required: false
        default: false
      enable-kafka-streams-lint:
        description: 'If true runs Kafka Streams Lint'
        type: boolean
        required: false
        default: true
        
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: extenda/actions/gcp-secret-manager@v0
        with:
          service-account-key: ${{ secrets.SECRET_AUTH }}
          secrets: |
            GITHUB-TOKEN: github-token
            NEXUS_PASSWORD: nexus-password
            NEXUS_USERNAME: nexus-username

      - name: Set up JDK
        if: ${{ inputs.use-old-setup-java == false }}
        uses: actions/setup-java@v3
        with:
          distribution: ${{ inputs.jdk-distribution }}
          java-version: ${{ inputs.java-version }}
          cache: maven

      - name: Set up JDK
        if: ${{ inputs.use-old-setup-java == true }}
        uses: actions/setup-java@v1
        with:
          distribution: ${{ inputs.jdk-distribution }}
          java-version: ${{ inputs.java-version }}

      - uses: actions/cache@v4
        if: ${{ inputs.use-old-setup-java == true }}
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Determine version
        uses: extenda/actions/conventional-version@v0
        id: semver
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag-prefix: ${{ inputs.tag-prefix }}
          build-number: ${{ github.run_number }}

      - name: Verify with Maven
        uses: extenda/actions/maven@v0
        with:
          args: verify -s settings.xml
          version: ${{ steps.semver.outputs.version }}-SNAPSHOT
          service-account-key: ${{ secrets.SECRET_AUTH }}
          working-directory: ${{ inputs.working-directory || '.' }}
      - name: Kafka Streams lint - fetch detekt config file
        if: ${{ inputs.enable-kafka-streams-lint == true }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
            curl -sSL \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3.raw" \
            "https://api.github.com/repos/extenda/shared-workflows/contents/.github/configs/detekt.yml" \
            -o ${{ inputs.working-directory || '.' }}/detekt.yml

      - name: Kafka Streams lint - get Detekt plugin for kafka streams
        if: ${{ inputs.enable-kafka-streams-lint == true }}
        uses: extenda/actions/maven@v0
        with:
          args: dependency:get -Dartifact=com.retailsvc:pnp-processors-core-common:0.125.0:jar
          service-account-key: ${{ secrets.SECRET_AUTH }}
          working-directory: ${{ inputs.working-directory || '.' }}
      
      - name: Kafka Streams lint - build classpath with maven
        if: ${{ inputs.enable-kafka-streams-lint == true }}
        uses: extenda/actions/maven@v0
        with:
          args: dependency:build-classpath -DincludeScope=runtime -Dmdep.outputFile=${{ inputs.working-directory || '.' }}/cp.txt -q
          service-account-key: ${{ secrets.SECRET_AUTH }}
          working-directory: ${{ inputs.working-directory || '.' }}

      - name: Kafka Streams lint - build classpath lib dir with maven
        if: ${{ inputs.enable-kafka-streams-lint == true }}
        uses: extenda/actions/maven@v0
        with:
          args: dependency:copy-dependencies -DoutputDirectory=${{ inputs.working-directory || '.' }}/lib -q
          service-account-key: ${{ secrets.SECRET_AUTH }}
          working-directory: ${{ inputs.working-directory || '.' }}

      - name: Kafka Streams lint - download Detekt CLI
        if: ${{ inputs.enable-kafka-streams-lint == true }}
        run: |
          curl -s -L --create-dirs -o ${{ inputs.working-directory || '.' }}/lib/detekt-cli.jar \
            https://github.com/detekt/detekt/releases/download/v1.23.8/detekt-cli-1.23.8-all.jar
      

      - name: Kafka Streams lint - verify with Detekt
        if: ${{ inputs.enable-kafka-streams-lint == true }}
        run: |
          java -cp "${{ inputs.working-directory || '.' }}/target/classes:${{ inputs.working-directory || '.' }}/lib/*" \
            io.gitlab.arturbosch.detekt.cli.Main \
              --input src/main/kotlin \
              --config detekt.yml \
              --classpath "${{ inputs.working-directory || '.' }}/target/classes:$(cat ${{ inputs.working-directory || '.' }}/cp.txt)" \
              --plugins ~/.m2/repository/com/retailsvc/pnp-processors-core-common/0.125.0/pnp-processors-core-common-0.125.0.jar \

      - name: Analyze with Sonar
        uses: extenda/actions/sonar-scanner@v0
        with:
          sonar-host: https://sonarcloud.io
          service-account-key: ${{ secrets.SECRET_AUTH }}
          working-directory: './${{ inputs.working-directory }}'

      - uses: graalvm/setup-graalvm@v1
        if: ${{ inputs.native-image == true && github.ref == 'refs/heads/master' }}
        with:
          version: 'latest'
          java-version: '17'
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Package Native image with maven
        uses: extenda/actions/maven@v0
        if: ${{ inputs.native-image == true && github.ref == 'refs/heads/master' }}
        with:
          args: verify -Dpackaging=native-image -s settings.xml
          version: ${{ steps.semver.outputs.version }}-SNAPSHOT
          service-account-key: ${{ secrets.SECRET_AUTH }}
          working-directory: ${{ inputs.working-directory || '.' }}

      - name: Publish pacts
        if: ${{ inputs.do-pact-consumer-tests == true }}
        uses: extenda/actions/pact-publish@v0
        with:
          pacts-directory: target/pacts
          service-account-key: ${{ secrets.SECRET_AUTH }}

      - name: Can i deploy - consumer?
        if: ${{ inputs.do-pact-consumer-tests == true }}
        uses: extenda/actions/pact-can-i-deploy@v0
        with:
          service-account-key: ${{ secrets.SECRET_AUTH }}
          application-name: ${{ inputs.pact-application-id }}
          retry-while-unknown: 15
          retry-interval: 10
          dry-run: ${{ inputs.is-pact-consumer-can-i-deploy-dry-run }}
          env: "staging"

      - name: Can i deploy - provider?
        if: ${{ inputs.do-pact-provider-tests == true }}
        uses: extenda/actions/pact-can-i-deploy@v0
        with:
          service-account-key: ${{ secrets.SECRET_AUTH }}
          application-name: ${{ inputs.pact-application-id }}
          retry-while-unknown: 15
          retry-interval: 10
          dry-run: ${{ inputs.is-pact-provider-can-i-deploy-dry-run }}
          env: "staging"

      - name: Setup gcloud
        if: github.ref == 'refs/heads/master'
        uses: extenda/actions/setup-gcloud@v0
        id: gcloud
        with:
          service-account-key: ${{ secrets.GCLOUD_AUTH_STAGING }}

      - name: Authenticate docker
        if: github.ref == 'refs/heads/master'
        run: |
          gcloud --quiet auth configure-docker

      - name: Docker build and push
        if: github.ref == 'refs/heads/master'
        run: |
          IMAGE=eu.gcr.io/extenda/${{ inputs.GCR_image_name }}
          WORKING_DIR=${{ inputs.working-directory || '.' }}
          docker build ./${WORKING_DIR} -f ${{ inputs.path-to-dockerfile }} --build-arg jar_version=${{ steps.semver.outputs.version }} -t $IMAGE:${{ steps.semver.outputs.version }} -t $IMAGE:${{ github.sha }} -t $IMAGE:latest
          docker push --all-tags $IMAGE

      - name: Attest image
        if: github.ref == 'refs/heads/master'
        uses: extenda/actions/binary-auth-attestation@v0
        with:
          image-path: eu.gcr.io/extenda/${{ inputs.GCR_image_name }}
          service-account-key: ${{ secrets.GCLOUD_AUTH_STAGING }}

      - name: Notify Slack if failed
        if: ${{ failure() && github.ref == 'refs/heads/master' }}
        uses: extenda/actions/slack-notify@v0
        with:
          text: |
            *Build failed for ${{ github.repository }}: ${{ github.workflow }}* :heavy_exclamation_mark:
            Build failed on ${{ github.event_name }} event. Workflow: ${{ github.workflow }}. Job: ${{github.job}}. Run id: <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.run_id }}>
          channel: ${{ inputs.slack-channel }}
          service-account-key: ${{ secrets.SECRET_AUTH }}

  release:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create release
        if: ${{ inputs.reuse-release == false }}
        uses: extenda/actions/conventional-release@v0
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag-prefix: ${{ inputs.tag-prefix }}
          build-number: ${{ github.run_number }}

      - name: Create release (reuse current release mode)
        if: ${{ inputs.reuse-release == true }}
        uses: extenda/actions/conventional-version@v0
        id: release_reuse
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag-prefix: ${{ inputs.tag-prefix }}
          build-number: ${{ github.run_number }}

      - uses: extenda/actions/setup-gcloud@v0
        with:
          service-account-key: ${{ secrets.GCLOUD_AUTH_STAGING }}

      - name: Add tag in GCR
        run: |
          gcloud container images add-tag \
            eu.gcr.io/extenda/${{ inputs.GCR_image_name }}:${{ github.sha }} \
            eu.gcr.io/extenda/${{ inputs.GCR_image_name }}:${{ env.release_version }}
        env:
          release_version: ${{ inputs.reuse-release == false && steps.release.outputs.version || steps.release_reuse.outputs.release-version }}

      - name: Create Pact STAGING release
        if: ${{ inputs.do-pact-consumer-tests == true && inputs.reuse-release == false }}
        uses: extenda/actions/pact-tag-version@v0
        with:
          service-account-key: ${{ secrets.SECRET_AUTH }}
          application-name: ${{ inputs.pact-application-id }}
          release-tag: ${{ steps.release.outputs.release-tag }}
          env: "staging"

      - name: Notify Slack if failed
        if: failure()
        uses: extenda/actions/slack-notify@v0
        with:
          text: |
            *Build failed for ${{ github.repository }}: ${{ github.workflow }}* :heavy_exclamation_mark:
            Build failed on ${{ github.event_name }} event. Workflow: ${{ github.workflow }}. Job: ${{github.job}}. Run id: <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.run_id }}>
          channel: ${{ inputs.slack-channel }}
          service-account-key: ${{ secrets.SECRET_AUTH }}

  staging:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: release
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: extenda/actions/gcp-secret-manager@v0
        with:
          service-account-key: ${{ secrets.SECRET_AUTH }}
          secrets: |
            GITHUB-TOKEN: github-token
            PACT_BROKER_USERNAME: pact-broker-username
            PACT_BROKER_PASSWORD: pact-broker-password

      - name: Determine version
        uses: extenda/actions/conventional-version@v0
        id: semver
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag-prefix: ${{ inputs.tag-prefix }}
          build-number: ${{ github.run_number }}

      - name: Deploy to Autopilot staging
        if: ${{ inputs.release-version == false }}
        uses: extenda/actions/cloud-deploy@v0
        with:
          secrets-account-key: ${{ secrets.SECRET_AUTH }}
          service-account-key: ${{ secrets.GCLOUD_AUTH_STAGING }}
          service-definition: ${{ inputs.service-definition }}
          image: eu.gcr.io/extenda/${{ inputs.GCR_image_name }}:${{ steps.semver.outputs.release-version }}
          update-dns: always

      - name: PACT record deployment
        if: ${{ inputs.do-pact-consumer-tests == true }}
        uses: extenda/actions/pact-record-deployment@v0
        with:
          service-account-key: ${{ secrets.SECRET_AUTH }}
          application-name: ${{ inputs.pact-application-id }}
          release-version: ${{ github.sha }}

      - name: Notify Slack if failed
        if: failure()
        uses: extenda/actions/slack-notify@v0
        with:
          text: |
            *Build failed for ${{ github.repository }}: ${{ github.workflow }}* :heavy_exclamation_mark:
            Build failed on ${{ github.event_name }} event. Workflow: ${{ github.workflow }}. Job: ${{github.job}}. Run id: <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.run_id }}>
          channel: ${{ inputs.slack-channel }}
          service-account-key: ${{ secrets.SECRET_AUTH }}

