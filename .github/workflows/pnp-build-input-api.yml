name: PNP Input API build workflow
on:
  workflow_call:
    secrets:
      GCR_image_name:
        description: 'A name of the image to be created in GCR'
        required: true
      path-to-sln:
        description: 'Path to the sln file'
        required: true
      path-to-unit-tests:
        description: 'Path to sln or unit tests csproj file.'
        required: true
      path-to-dockerfile:
        description: 'Path to dockerfile which builds the API.'
        required: true
      slack-channel:
        description: 'A slack channel which needs to be notified in case of failure'
        required: false
      SECRET_AUTH:
        required: true
      GCLOUD_AUTH_STAGING:
        required: true
      pact-application-id:
        required: false
      pact-webhook-id:
        required: false
    inputs:
      acceptance-dockerfile-path:
        description: 'Path to acceptance tests dockerfile.'
        default: 'Acceptance.Dockerfile'
        type: string
        required: false
      acceptance-nuget-config-path:
        description: 'Path to nuget.config for acceptance tests.'
        default: 'src/nuget.config'
        type: string
        required: false
      do-pact-consumer-tests:
        description: 'If true runs tests defining data contracts'
        type: boolean
        required: false
        default: false
      do-pact-provider-tests:
        description: 'If true runs tests verifying implementation against data-contracts'
        type: boolean
        required: false
        default: false
      include-asyncapi-schema:
        description: 'If true restores AsyncAPI schema from cache and includes it to the deployment'
        type: boolean
        required: false
        default: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: extenda/actions/gcp-secret-manager@v0
        with:
          service-account-key: ${{ secrets.SECRET_AUTH }}
          secrets: |
            NEXUS_PASSWORD: nexus-password
            NEXUS_USERNAME: nexus-username
            NUGET_API_KEY: nuget-api-key
            PACT_BROKER_PASSWORD: pact-broker-password
            PACT_BROKER_USERNAME: pact-broker-username

      - name: Determine version
        uses: extenda/actions/conventional-version@v0
        id: semver
        with:
          build-number: ${{ github.run_number }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.x'

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1
        with:
          nuget-version: 'latest'
      
      - name: Setup NuGet sources
        uses: extenda/actions/setup-nuget-sources@v0
        with:
          config-file: src/nuget.config #check this in all of the APIs
          sources: |
            [{
              "name": "nuget.org",
              "source": "https://api.nuget.org/v3/index.json"
            },
            {
              "name": "Extenda",
              "source": "https://repo.extendaretail.com/repository/nuget-hosted/index.json",
              "username": "${{ env.NEXUS_USERNAME }}",
              "password": "${{ env.NEXUS_PASSWORD }}",
              "apikey": "${{ env.NUGET_API_KEY }}"
            }]

      - name: Start Sonar Scanner
        uses: extenda/actions/sonar-scanner@v0
        with:
          sonar-host: https://sonarcloud.io
          sonar-scanner: dotnet
          main-branch: ${{ steps.semver.outputs.branch-name-short }}
          service-account-key: ${{ secrets.SECRET_AUTH }}

      - name: Build dotnet solution
        run: |
          dotnet build ${{ secrets.path-to-sln }} --configuration Release /p:Version=${{ steps.semver.outputs.semver }} /p:FileVersion=${{ steps.semver.outputs.version }}
      
      - name: Create/update Pact broker webhook
        if:  ${{ inputs.do-pact-provider-tests == true }}
        uses: extenda/actions/pact-create-webhook@v0
        with:
          service-account-key: ${{ secrets.SECRET_AUTH }}
          application-name: ${{ secrets.pact-application-id }}
          uuid: ${{secrets.pact-webhook-id}}

      - name: Run Unit Tests
        run: |
          dotnet test ${{ secrets.path-to-unit-tests }} /p:CollectCoverage=true /p:CoverletOutputFormat=opencover --configuration Release --no-restore
        env:
          GIT_BRANCH: ${{ github.ref_name }}
          GIT_COMMIT: ${{ github.sha }}
          VERIFY_PROFILE: VERIFY_ACTUAL

      - name: Analyze with Sonar  
        uses: extenda/actions/sonar-scanner@v0
        with:
          sonar-host: https://sonarcloud.io
          sonar-scanner: dotnet
          main-branch: ${{ steps.semver.outputs.branch-name-short }}
          service-account-key: ${{ secrets.SECRET_AUTH }}

      - name: Create/update pact version
        if: ${{ inputs.do-pact-provider-tests == true }}
        uses: extenda/actions/pact-create-version@v0
        with:
          service-account-key: ${{ secrets.SECRET_AUTH }}
          application-name: ${{ secrets.pact-application-id }}

      - name: Can I deploy?
        if: ${{ inputs.do-pact-provider-tests == true }}
        uses: extenda/actions/pact-can-i-deploy@v0
        with:
          service-account-key: ${{ secrets.SECRET_AUTH }}
          application-name:  ${{ secrets.pact-application-id }}
          retry-while-unknown: 15
          retry-interval: 10

      - name: Notify Slack if failed
        if: ${{ failure() && github.ref == 'refs/heads/master' }}
        uses: extenda/actions/slack-notify@v0
        with:
          text: |
            *Build failed for ${{ github.repository }}: ${{ github.workflow }}* :heavy_exclamation_mark:
            Build failed on ${{ github.event_name }} event. Workflow: ${{ github.workflow }}. Job: ${{github.job}}. Run id: <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.run_id }}>
          channel: ${{ secrets.slack-channel }}
          service-account-key: ${{ secrets.SECRET_AUTH }}

  staging:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: extenda/actions/gcp-secret-manager@v0
        with:
          service-account-key: ${{ secrets.SECRET_AUTH }}
          secrets: |
            NEXUS_PASSWORD: nexus-password
            NEXUS_USERNAME: nexus-username
            NUGET_API_KEY: nuget-api-key

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1
        with:
          nuget-version: 'latest'

      - name: Setup NuGet sources
        uses: extenda/actions/setup-nuget-sources@v0
        with:
          config-file: src/nuget.config
          sources: |
            [{
              "name": "nuget.org",
              "source": "https://api.nuget.org/v3/index.json"
            },
            {
              "name": "Extenda",
              "source": "https://repo.extendaretail.com/repository/nuget-hosted/index.json",
              "username": "${{ env.NEXUS_USERNAME }}",
              "password": "${{ env.NEXUS_PASSWORD }}",
              "apikey": "${{ env.NUGET_API_KEY }}"
            }]

      - uses: extenda/actions/setup-gcloud@v0
        with:
          service-account-key: ${{ secrets.GCLOUD_AUTH_STAGING }}

      - name: Restore AsyncAPI schema from cache
        if: ${{ inputs.include-asyncapi-schema == true }}
        uses: actions/cache@v3
        with:
          path: schemas/v1/asyncapi.yaml
          key: asyncapi-schema-${{ github.run_id }}

      - name: Build and push Docker
        run: |
          gcloud --quiet auth configure-docker
          IMAGE=eu.gcr.io/extenda/${{ secrets.GCR_image_name }}
          docker build -t $IMAGE:${{ github.sha }} -t $IMAGE:latest . -f ${{ secrets.path-to-dockerfile }}
          docker push --all-tags $IMAGE

      - name: Attest image
        uses: extenda/actions/binary-auth-attestation@v0
        with:
          image-path: eu.gcr.io/extenda/${{ secrets.GCR_image_name }}
          service-account-key: ${{ secrets.GCLOUD_AUTH_STAGING }}

      - name: Deploy to staging
        uses: extenda/actions/cloud-run@v0
        with:
          service-account-key: ${{ secrets.GCLOUD_AUTH_STAGING }}
          image: eu.gcr.io/extenda/${{ secrets.GCR_image_name }}:${{ github.sha }}

      - name: PACT record deploy to STAGING
        if: ${{ inputs.do-pact-provider-tests == true }}
        uses: extenda/actions/pact-record-deployment@v0
        with:
          service-account-key: ${{ secrets.SECRET_AUTH }}
          application-name: ${{ secrets.pact-application-id }}
          release-version: ${{ github.sha }}
          env: "staging"
      
      - name: Notify Slack if failed
        if: failure()
        uses: extenda/actions/slack-notify@v0
        with:
          text: |
            *Build failed for ${{ github.repository }}: ${{ github.workflow }}* :heavy_exclamation_mark:
            Build failed on ${{ github.event_name }} event. Workflow: ${{ github.workflow }}. Job: ${{github.job}}. Run id: <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.run_id }}>
          channel: ${{ secrets.slack-channel }}
          service-account-key: ${{ secrets.SECRET_AUTH }}

  acceptance:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: staging
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: extenda/actions/gcp-secret-manager@v0
        with:
          service-account-key: ${{ secrets.SECRET_AUTH }}
          secrets: |
            NEXUS_PASSWORD: nexus-password
            NEXUS_USERNAME: nexus-username
            PACT_BROKER_PASSWORD: pact-broker-password
            PACT_BROKER_USERNAME: pact-broker-username

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.x'

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1
        with:
          nuget-version: 'latest'

      - name: Setup NuGet sources
        uses: extenda/actions/setup-nuget-sources@v0
        with:
          config-file: ${{ inputs.acceptance-nuget-config-path }}
          sources: |
            [{
              "name": "nuget.org",
              "source": "https://api.nuget.org/v3/index.json"
            },
            {
              "name": "Extenda",
              "source": "https://repo.extendaretail.com/repository/nuget-hosted/index.json",
              "username": "${{ env.NEXUS_USERNAME }}",
              "password": "${{ env.NEXUS_PASSWORD }}",
              "apikey": "${{ env.NUGET_API_KEY }}"
            }]

      - uses: extenda/actions/setup-gcloud@v0
        id: gcloud
        with:
          service-account-key: ${{ secrets.GCLOUD_AUTH_STAGING }}

      - name: Build test image
        run: |
          gcloud --quiet auth configure-docker
          IMAGE=eu.gcr.io/extenda/${{ secrets.GCR_image_name }}-acceptance:${{ github.sha }}
          docker build . -f ${{ inputs.acceptance-dockerfile-path }} -t $IMAGE
          docker push $IMAGE

      - name: Attest image
        uses: extenda/actions/binary-auth-attestation@v0
        with:
          image-path: eu.gcr.io/extenda/${{ secrets.GCR_image_name }}-acceptance
          service-account-key: ${{ secrets.GCLOUD_AUTH_STAGING }}

      - name: Acceptance tests
        uses: extenda/actions/test-pod@v0
        with:
          service-account-key: ${{ secrets.GCLOUD_AUTH_STAGING }}
          image: eu.gcr.io/extenda/${{ secrets.GCR_image_name }}-acceptance:${{ github.sha }}
        env:
          TESTPOD_ACCEPTANCE_TESTS_API_KEY: sm://${{ steps.gcloud.outputs.project-id }}/ACCEPTANCE_TESTS_API_KEY
          TESTPOD_ACCEPTANCE_TESTS_USER_EMAIL: sm://${{ steps.gcloud.outputs.project-id }}/ACCEPTANCE_TESTS_USER_EMAIL
          TESTPOD_TESTUSER_PASSWORD: sm://${{ steps.gcloud.outputs.project-id }}/TESTUSER_PASSWORD
            
      - name: Notify Slack if failed
        if: failure()
        uses: extenda/actions/slack-notify@v0
        with:
          text: |
            *Build failed for ${{ github.repository }}: ${{ github.workflow }}* :heavy_exclamation_mark:
            Build failed on ${{ github.event_name }} event. Workflow: ${{ github.workflow }}. Job: ${{github.job}}. Run id: <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.run_id }}>
          channel: ${{ secrets.slack-channel }}
          service-account-key: ${{ secrets.SECRET_AUTH }}
      
  release:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: acceptance
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Create release
        uses: extenda/actions/conventional-release@v0
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: extenda/actions/setup-gcloud@v0
        with:
          service-account-key: ${{ secrets.GCLOUD_AUTH_STAGING }}

      - name: Add tag in GCR
        run: |
          gcloud container images add-tag \
            eu.gcr.io/extenda/${{ secrets.GCR_image_name }}:${{ github.sha }} \
            eu.gcr.io/extenda/${{ secrets.GCR_image_name }}:${{ steps.release.outputs.version }}

      - name: Create Pact STAGING release
        if: ${{ inputs.do-pact-provider-tests == true }}
        uses: extenda/actions/pact-tag-version@v0
        with:
          service-account-key: ${{ secrets.SECRET_AUTH }}
          application-name: ${{ secrets.pact-application-id }}
          release-tag: ${{ steps.release.outputs.release-tag }}
          env: "staging"

      - name: Notify Slack if failed
        if: failure()
        uses: extenda/actions/slack-notify@v0
        with:
          text: |
            *Build failed for ${{ github.repository }}: ${{ github.workflow }}* :heavy_exclamation_mark:
            Build failed on ${{ github.event_name }} event. Workflow: ${{ github.workflow }}. Job: ${{github.job}}. Run id: <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.run_id }}>
          channel: ${{ secrets.slack-channel }}
          service-account-key: ${{ secrets.SECRET_AUTH }}

  jira-release-notes:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs:
      - release
    steps:
      - uses: actions/checkout@v1

      - uses: extenda/actions/gcp-secret-manager@v0
        with:
          service-account-key: ${{ secrets.SECRET_AUTH }}
          secrets: |
            JIRA_USERNAME: jira-username
            JIRA_PASSWORD: jira-password
      
      - name: Update JIRA release notes
        uses: extenda/actions/jira-releasenotes@v0
        with:
          jira-project: EA
