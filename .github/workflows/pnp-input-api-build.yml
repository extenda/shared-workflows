name: PNP Input API build workflow
on:
  workflow_call:
    secrets:
      GCR_image_name:
        description: |
          The name of the image to be created in GCR.
        required: true
      path-to-sln:
        description: |
          The path to the solution.
        required: true
      path-to-unit-tests:
        description: |
          The path to the unit tests project/solution.
        required: true
      path-to-nuget-config:
        description: |
          The path to the nuget config file.
        required: false
      path-to-dockerfile:
        description: |
          The path to the dockerfile which builds the API.
        required: true
      path-to-acceptance-tests:
        description: |
          The path to the acceptance tests project/solution.
        required: true
      path-to-acceptance-tests-nuget-config:
        description: |
          The path to the acceptance tests nuget config file.
        required: true
      staging-service-base-url:
        description: |
          The base url of the service in staging.
        required: true
      slack-channel:
        description: |
          The slack channel which needs to be notified in case of failure.
        required: false
      SECRET_AUTH:
        required: true
      GCLOUD_AUTH_STAGING:
        required: true
      pact-application-id:
        required: false
      pact-webhook-id:
        required: false
      wid-token-audience:
        description: |
          The audience of the generated Workload Identity token. Should be the name of the receiving service.
        required: false
      wid-token-service-account:
        description: |
          The service account of the requestor service. Will be used during Workload Identity token generation.
        required: false
    inputs:
      do-pact-consumer-tests:
        description: |
          If true, runs tests defining data contracts.
        type: boolean
        required: false
        default: false
      do-pact-provider-tests:
        description: |
          If true, runs tests verifying implementation against data contracts.
        type: boolean
        required: false
        default: false
      is-pact-consumer-can-i-deploy-dry-run:
        description: |
          If true, consumer can-i-deploy step will be executed in dry-run mode.
        type: boolean
        required: false
        default: false
      is-pact-provider-can-i-deploy-dry-run:
        description: |
          If true, provider can-i-deploy step will be executed in dry-run mode.
        type: boolean
        required: false
        default: false
      dotnet-version:
        description: |
          The .NET version.
        type: number
        required: false
        default: 8

jobs:
  test-opa-policies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Test OPA policies
        uses: extenda/actions/opa-policy-test@v0
        with:
          service-account-key: ${{ secrets.GCLOUD_AUTH_STAGING }}

      - name: Notify Slack if failed
        if: failure() && github.ref == 'refs/heads/master'
        uses: extenda/actions/slack-notify@v0
        with:
          text: |
            *Build failed for ${{ github.repository }}: ${{ github.workflow }}* :heavy_exclamation_mark:
            Build failed on ${{ github.event_name }} event. Workflow: ${{ github.workflow }}. Job: ${{github.job}}. Run id: <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.run_id }}>
          channel: enterprise-pnp-failed-builds
          service-account-key: ${{ secrets.SECRET_AUTH }}

  test-application:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: extenda/actions/gcp-secret-manager@v0
        with:
          service-account-key: ${{ secrets.SECRET_AUTH }}
          secrets: |
            NEXUS_PASSWORD: nexus-password
            NEXUS_USERNAME: nexus-username
            NUGET_API_KEY: nuget-api-key
            PACT_BROKER_PASSWORD: pact-broker-password
            PACT_BROKER_USERNAME: pact-broker-username

      - name: Determine version
        uses: extenda/actions/conventional-version@v0
        id: semver
        with:
          build-number: ${{ github.run_number }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '${{ inputs.dotnet-version }}.0.x'

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1
        with:
          nuget-version: 'latest'

      - name: Setup NuGet sources
        uses: extenda/actions/setup-nuget-sources@v0
        with:
          config-file: ${{ secrets.path-to-nuget-config || 'src/nuget.config' }}
          sources: |
            [{
              "name": "nuget.org",
              "source": "https://api.nuget.org/v3/index.json"
            },
            {
              "name": "Extenda",
              "source": "https://repo.extendaretail.com/repository/nuget-hosted/index.json",
              "username": "${{ env.NEXUS_USERNAME }}",
              "password": "${{ env.NEXUS_PASSWORD }}",
              "apikey": "${{ env.NUGET_API_KEY }}"
            }]

      - name: Start Sonar Scanner
        uses: extenda/actions/sonar-scanner@v0
        with:
          sonar-host: https://sonarcloud.io
          sonar-scanner: dotnet
          service-account-key: ${{ secrets.SECRET_AUTH }}
          dotnet-args: /d:sonar.scanner.scanAll=false

      - name: Build dotnet solution
        run: |
          dotnet build ${{ secrets.path-to-sln }} --configuration Release /p:Version=${{ steps.semver.outputs.semver }} /p:FileVersion=${{ steps.semver.outputs.version }}

      - name: Create/update Pact broker webhook
        if: ${{ inputs.do-pact-provider-tests == true }}
        uses: extenda/actions/pact-create-webhook@v0
        with:
          service-account-key: ${{ secrets.SECRET_AUTH }}
          application-name: ${{ secrets.pact-application-id }}
          uuid: ${{secrets.pact-webhook-id}}

      - name: Run Unit Tests
        run: |
          dotnet test ${{ secrets.path-to-unit-tests }} --configuration Release --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=opencover
        env:
          GIT_BRANCH: ${{ github.ref_name }}
          GIT_COMMIT: ${{ github.sha }}
          VERIFY_PROFILE: VERIFY_ACTUAL

      - name: Analyze with Sonar
        uses: extenda/actions/sonar-scanner@v0
        with:
          sonar-host: https://sonarcloud.io
          sonar-scanner: dotnet
          service-account-key: ${{ secrets.SECRET_AUTH }}

      - name: Create/update pact version
        if: ${{ inputs.do-pact-provider-tests == true }}
        uses: extenda/actions/pact-create-version@v0
        with:
          service-account-key: ${{ secrets.SECRET_AUTH }}
          application-name: ${{ secrets.pact-application-id }}

      - name: Can I deploy - provider?
        if: ${{ inputs.do-pact-provider-tests == true }}
        uses: extenda/actions/pact-can-i-deploy@v0
        with:
          service-account-key: ${{ secrets.SECRET_AUTH }}
          application-name: ${{ secrets.pact-application-id }}
          retry-while-unknown: 15
          retry-interval: 10
          dry-run: ${{ inputs.is-pact-provider-can-i-deploy-dry-run }}
          env: 'staging'

      - name: Notify Slack if failed
        if: ${{ failure() && github.ref == 'refs/heads/master' }}
        uses: extenda/actions/slack-notify@v0
        with:
          text: |
            *Build failed for ${{ github.repository }}: ${{ github.workflow }}* :heavy_exclamation_mark:
            Build failed on ${{ github.event_name }} event. Workflow: ${{ github.workflow }}. Job: ${{github.job}}. Run id: <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.run_id }}>
          channel: ${{ secrets.slack-channel }}
          service-account-key: ${{ secrets.SECRET_AUTH }}

  staging:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: test-application
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: extenda/actions/gcp-secret-manager@v0
        with:
          service-account-key: ${{ secrets.SECRET_AUTH }}
          secrets: |
            NEXUS_PASSWORD: nexus-password
            NEXUS_USERNAME: nexus-username
            NUGET_API_KEY: nuget-api-key

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1
        with:
          nuget-version: 'latest'

      - name: Setup NuGet sources
        uses: extenda/actions/setup-nuget-sources@v0
        with:
          config-file: ${{ secrets.path-to-nuget-config || 'src/nuget.config' }}
          sources: |
            [{
              "name": "nuget.org",
              "source": "https://api.nuget.org/v3/index.json"
            },
            {
              "name": "Extenda",
              "source": "https://repo.extendaretail.com/repository/nuget-hosted/index.json",
              "username": "${{ env.NEXUS_USERNAME }}",
              "password": "${{ env.NEXUS_PASSWORD }}",
              "apikey": "${{ env.NUGET_API_KEY }}"
            }]

      - uses: extenda/actions/setup-gcloud@v0
        with:
          service-account-key: ${{ secrets.GCLOUD_AUTH_STAGING }}

      - name: Build and push Docker
        run: |
          gcloud --quiet auth configure-docker
          IMAGE=eu.gcr.io/extenda/${{ secrets.GCR_image_name }}
          docker build -t $IMAGE:${{ github.sha }} -t $IMAGE:latest . -f ${{ secrets.path-to-dockerfile }}
          docker push --all-tags $IMAGE
  
      - name: Attest image
        uses: extenda/actions/binary-auth-attestation@v0
        with:
          image-path: eu.gcr.io/extenda/${{ secrets.GCR_image_name }}
          service-account-key: ${{ secrets.GCLOUD_AUTH_STAGING }}

      - name: Deploy to staging
        uses: extenda/actions/cloud-deploy@v0
        with:
          secrets-account-key: ${{ secrets.SECRET_AUTH }}
          service-account-key: ${{ secrets.GCLOUD_AUTH_STAGING }}
          image: eu.gcr.io/extenda/${{ secrets.GCR_image_name }}:${{ github.sha }}
          update-dns: always

      - name: PACT record deploy to STAGING
        if: ${{ inputs.do-pact-provider-tests == true }}
        uses: extenda/actions/pact-record-deployment@v0
        with:
          service-account-key: ${{ secrets.SECRET_AUTH }}
          application-name: ${{ secrets.pact-application-id }}
          release-version: ${{ github.sha }}
          env: 'staging'

      - name: Notify Slack if failed
        if: failure()
        uses: extenda/actions/slack-notify@v0
        with:
          text: |
            *Build failed for ${{ github.repository }}: ${{ github.workflow }}* :heavy_exclamation_mark:
            Build failed on ${{ github.event_name }} event. Workflow: ${{ github.workflow }}. Job: ${{github.job}}. Run id: <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.run_id }}>
          channel: ${{ secrets.slack-channel }}
          service-account-key: ${{ secrets.SECRET_AUTH }}

  acceptance:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: staging
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: extenda/actions/gcp-secret-manager@v0
        with:
          service-account-key: ${{ secrets.SECRET_AUTH }}
          secrets: |
            NEXUS_PASSWORD: nexus-password
            NEXUS_USERNAME: nexus-username
            NUGET_API_KEY: nuget-api-key
            API_KEY: api-key-hiidentity-staff

      - uses: extenda/actions/gcp-secret-manager@v0
        with:
          service-account-key: ${{ secrets.GCLOUD_AUTH_STAGING }}
          secrets: |
            TEST_TENANT_ID: iam-test-tenant-id

      - name: Get IAM token
        id: testtoken
        uses: extenda/actions/iam-test-token@v0
        with:
          service-account-key: ${{ secrets.GCLOUD_AUTH_STAGING }}
          api-key: ${{ env.API_KEY }}

      - name: Check if WID token secrets were provided
        id: wid-token-secrets-check
        shell: bash
        run: |
          if [ "${{ secrets.wid-token-audience }}" != '' ] && [ "${{ secrets.wid-token-service-account }}" != '' ]; then
            echo "secretsProvided=true" >> $GITHUB_OUTPUT;
          else
            echo "secretsProvided=false" >> $GITHUB_OUTPUT;
          fi

      - name: Get Identity token
        if: ${{ steps.wid-token-secrets-check.outputs.secretsProvided == 'true' }}
        id: identitytoken
        uses: extenda/actions/identity-token@v0
        with:
          service-account-key: ${{ secrets.GCLOUD_AUTH_STAGING }}
          service-account: ${{ secrets.wid-token-service-account}}
          audiences: ${{ secrets.wid-token-audience }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '${{ inputs.dotnet-version }}.0.x'

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1
        with:
          nuget-version: 'latest'

      - name: Setup NuGet sources
        uses: extenda/actions/setup-nuget-sources@v0
        with:
          config-file: ${{ secrets.path-to-acceptance-tests-nuget-config }}
          sources: |
            [{
              "name": "nuget.org",
              "source": "https://api.nuget.org/v3/index.json"
            },
            {
              "name": "Extenda",
              "source": "https://repo.extendaretail.com/repository/nuget-hosted/index.json",
              "username": "${{ env.NEXUS_USERNAME }}",
              "password": "${{ env.NEXUS_PASSWORD }}",
              "apikey": "${{ env.NUGET_API_KEY }}"
            }]

      - name: Run Acceptance Tests with IAM token
        run: |
          dotnet test ${{ secrets.path-to-acceptance-tests }}
        env:
          API_URL: ${{ secrets.staging-service-base-url }}
          BEARER_TOKEN: ${{ steps.testtoken.outputs.iam-token }}

      - name: Run Acceptance Tests with WID token
        if: ${{ steps.wid-token-secrets-check.outputs.secretsProvided == 'true' }}
        run: |
          dotnet test ${{ secrets.path-to-acceptance-tests }}
        env:
          API_URL: ${{ secrets.staging-service-base-url }}
          BEARER_TOKEN: ${{ steps.identitytoken.outputs.identity-token }}
          TENANT_ID: ${{ env.TEST_TENANT_ID }}

      - name: Notify Slack if failed
        if: failure()
        uses: extenda/actions/slack-notify@v0
        with:
          text: |
            *Build failed for ${{ github.repository }}: ${{ github.workflow }}* :heavy_exclamation_mark:
            Build failed on ${{ github.event_name }} event. Workflow: ${{ github.workflow }}. Job: ${{github.job}}. Run id: <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.run_id }}>
          channel: ${{ secrets.slack-channel }}
          service-account-key: ${{ secrets.SECRET_AUTH }}

  release:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: acceptance
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create release
        uses: extenda/actions/conventional-release@v0
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: extenda/actions/setup-gcloud@v0
        with:
          service-account-key: ${{ secrets.GCLOUD_AUTH_STAGING }}

      - name: Add tag in GCR
        run: |
          gcloud container images add-tag \
            eu.gcr.io/extenda/${{ secrets.GCR_image_name }}:${{ github.sha }} \
            eu.gcr.io/extenda/${{ secrets.GCR_image_name }}:${{ steps.release.outputs.version }}

      - name: Create Pact STAGING release
        if: ${{ inputs.do-pact-provider-tests == true }}
        uses: extenda/actions/pact-tag-version@v0
        with:
          service-account-key: ${{ secrets.SECRET_AUTH }}
          application-name: ${{ secrets.pact-application-id }}
          release-tag: ${{ steps.release.outputs.release-tag }}
          env: 'staging'

      - name: Notify Slack if failed
        if: failure()
        uses: extenda/actions/slack-notify@v0
        with:
          text: |
            *Build failed for ${{ github.repository }}: ${{ github.workflow }}* :heavy_exclamation_mark:
            Build failed on ${{ github.event_name }} event. Workflow: ${{ github.workflow }}. Job: ${{github.job}}. Run id: <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.run_id }}>
          channel: ${{ secrets.slack-channel }}
          service-account-key: ${{ secrets.SECRET_AUTH }}
