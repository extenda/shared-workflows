name: Build and Deploy
on:
  workflow_call:
    secrets:
      GCR_image_name:
        description: 'A name of the image to be created in GCR'
        required: true
      path-to-sln:
        description: 'Path to the sln file'
        required: true
      path-to-unit-tests:
        description: 'Path to sln or unit tests csproj file.'
        required: true
      path-to-dockerfile:
        description: 'Path to dockerfile which builds the API.'
        required: true
      staging-service-base-url:
        description: 'A url of the service in staging'
        required: false
      slack-channel:
        description: 'A slack channel which needs to be notified in case of failure'
        required: false
      SECRET_AUTH:
        required: true
      GCLOUD_AUTH_STAGING:
        required: true
    inputs:
      has-k6-tests:
        description: 'If true runs k6 tests for this API. Requires "k6-tests-root-folder" and "k6-tests-file-names" to run k6 tests'     
        type: boolean
        required: true
      k6-node-version:
        description: 'Node version needed for k6'
        type: number
        required: false
        default: 14
      k6-tests-root-folder:
        description: 'k6 tests root folder'
        type: string
        required: false
        default: 'test/k6'
      k6-tests-file-names:
        description: 'The k6 tests file names. Should follow the JSON string array format.'
        type: string
        required: false
        default: '["dist/api-tests-v1.js", "dist/api-tests-v2.js"]'
      update-dns:
        description: |
          If set to `true`, DNS and traffic will be routed to new service on the clan cluster.
          If set to `false`, DNS and traffic will be routed to the existing service on the tribe cluster.
          Default value is `true`.
        type: boolean
        required: false
        default: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: extenda/actions/gcp-secret-manager@v0
        with:
          service-account-key: ${{ secrets.SECRET_AUTH }}
          secrets: |
            NEXUS_PASSWORD: nexus-password
            NEXUS_USERNAME: nexus-username
            NUGET_API_KEY: nuget-api-key  
            STYRA_TOKEN: styra-das-token                            
        
      - name: Determine version
        uses: extenda/actions/conventional-version@v0
        id: semver
        with:
          build-number: ${{ github.run_number }}
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1
        with:
          nuget-version: 'latest'

      - name: Setup NuGet sources
        uses: extenda/actions/setup-nuget-sources@v0
        with:
          config-file: src/nuget.config
          sources: |
            [{
              "name": "nuget.org",
              "source": "https://api.nuget.org/v3/index.json"
            },
            {
              "name": "Extenda",
              "source": "https://repo.extendaretail.com/repository/nuget-hosted/index.json",
              "username": "${{ env.NEXUS_USERNAME }}",
              "password": "${{ env.NEXUS_PASSWORD }}",
              "apikey": "${{ env.NUGET_API_KEY }}"
            }]

      - name: Start Sonar Scanner
        uses: extenda/actions/sonar-scanner@v0
        with:
          sonar-host: https://sonarcloud.io
          sonar-scanner: dotnet
          service-account-key: ${{ secrets.SECRET_AUTH }}

      - name: Build dotnet solution
        run: |
          dotnet build ${{ secrets.path-to-sln }} --configuration Release /p:Version=${{ steps.semver.outputs.semver }}
      
      - name: Test dotnet solution
        run: |
          dotnet test ${{ secrets.path-to-unit-tests }} /p:CollectCoverage=true /p:CoverletOutputFormat=opencover

      - name: Analyze with Sonar  
        uses: extenda/actions/sonar-scanner@v0
        with:
          sonar-host: https://sonarcloud.io
          sonar-scanner: dotnet
          service-account-key: ${{ secrets.SECRET_AUTH }}
      
      - name: Notify Slack if failed
        if: ${{ failure() && github.ref == 'refs/heads/master' }}
        uses: extenda/actions/slack-notify@v0
        with:
          text: |
            *Build failed for ${{ github.repository }}: ${{ github.workflow }}* :heavy_exclamation_mark:
            Build failed on ${{ github.event_name }} event. Workflow: ${{ github.workflow }}. Job: ${{github.job}}. Run id: <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.run_id }}>
          channel: ${{ secrets.slack-channel }}
          service-account-key: ${{ secrets.SECRET_AUTH }}

  staging:
    needs: build
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3 

      - uses: extenda/actions/gcp-secret-manager@v0
        with:
          service-account-key: ${{ secrets.SECRET_AUTH }}
          secrets: |
            NEXUS_PASSWORD: nexus-password
            NEXUS_USERNAME: nexus-username
            NUGET_API_KEY: nuget-api-key

      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1
        with:
          nuget-version: 'latest'

      - name: Setup NuGet sources
        uses: extenda/actions/setup-nuget-sources@v0
        with:
          config-file: src/nuget.config
          sources: |
            [{
              "name": "nuget.org",
              "source": "https://api.nuget.org/v3/index.json"
            },
            {
              "name": "Extenda",
              "source": "https://repo.extendaretail.com/repository/nuget-hosted/index.json",
              "username": "${{ env.NEXUS_USERNAME }}",
              "password": "${{ env.NEXUS_PASSWORD }}",
              "apikey": "${{ env.NUGET_API_KEY }}"
            }]

      - uses: extenda/actions/setup-gcloud@v0
        with:
          service-account-key: ${{ secrets.GCLOUD_AUTH_STAGING }}

      - name: Build and push Docker
        run: |
          gcloud --quiet auth configure-docker
          IMAGE=eu.gcr.io/extenda/${{ secrets.GCR_image_name }}
          docker build -t $IMAGE:${{ github.sha }} -t $IMAGE:latest . -f ${{ secrets.path-to-dockerfile }}
          docker push --all-tags $IMAGE

      - name: Attest image
        uses: extenda/actions/binary-auth-attestation@v0
        with:
          image-path: eu.gcr.io/extenda/${{ secrets.GCR_image_name }}
          service-account-key: ${{ secrets.GCLOUD_AUTH_STAGING }}

      - name: Deploy temp service to staging
        if: ${{ inputs.update-dns == false }}
        uses: extenda/actions/cloud-deploy@v0
        with:
          secrets-account-key: ${{ secrets.SECRET_AUTH }}
          service-account-key: ${{ secrets.GCLOUD_AUTH_STAGING }}
          image: eu.gcr.io/extenda/${{ secrets.GCR_image_name }}:${{ github.sha }}
          update-dns: if-missing

      - name: Deploy to staging
        if: ${{ inputs.update-dns == true }}
        uses: extenda/actions/cloud-deploy@v0
        with:
          secrets-account-key: ${{ secrets.SECRET_AUTH }}
          service-account-key: ${{ secrets.GCLOUD_AUTH_STAGING }}
          image: eu.gcr.io/extenda/${{ secrets.GCR_image_name }}:${{ github.sha }}
          update-dns: always
      
      - name: Notify Slack if failed
        if: failure()
        uses: extenda/actions/slack-notify@v0
        with:
          text: |
            *Build failed for ${{ github.repository }}: ${{ github.workflow }}* :heavy_exclamation_mark:
            Build failed on ${{ github.event_name }} event. Workflow: ${{ github.workflow }}. Job: ${{github.job}}. Run id: <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.run_id }}>
          channel: ${{ secrets.slack-channel }}
          service-account-key: ${{ secrets.SECRET_AUTH }}

  k6:
    needs: staging
    if: ${{ github.ref == 'refs/heads/master' && inputs.has-k6-tests == true }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        k6-test-file-name: ${{ fromJSON(inputs.k6-tests-file-names) }}

    steps:
      - uses: actions/checkout@v3
      
      - uses: extenda/actions/gcp-secret-manager@v0
        with:
          service-account-key: ${{ secrets.SECRET_AUTH }}
          secrets: |
            API_KEY: api-key-hiidentity-staff

      - name: IAM token
        id: testtoken
        uses: extenda/actions/iam-test-token@v0
        with:
          service-account-key: ${{ secrets.GCLOUD_AUTH_STAGING }}
          api-key: ${{ env.API_KEY }}

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.k6-node-version }}

      - name: yarn webpack
        run: |
         cd ${{ inputs.k6-tests-root-folder }}
         yarn install
         yarn webpack
    
      - name: Run API tests
        uses: k6io/action@v0.2.0
        with:
          filename: ${{ inputs.k6-tests-root-folder }}/${{ matrix.k6-test-file-name }}
          flags: --env IAM_TOKEN=${{ steps.testtoken.outputs.iam-token }} --env SERVICE_BASE_URL=${{ secrets.staging-service-base-url }}

      - name: Notify Slack if failed
        if: failure()
        uses: extenda/actions/slack-notify@v0
        with:
          text: |
            *Build failed for ${{ github.repository }}: ${{ github.workflow }}* :heavy_exclamation_mark:
            Build failed on ${{ github.event_name }} event. Workflow: ${{ github.workflow }}. Job: ${{github.job}}. Run id: <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.run_id }}>
          channel: ${{ secrets.slack-channel }}
          service-account-key: ${{ secrets.SECRET_AUTH }}

  release:
    needs: [staging, k6]
    if: |
      always() &&
      github.ref == 'refs/heads/master' &&
      needs.staging.result == 'success' &&
      (inputs.has-k6-tests == false || needs.k6.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Create release
        uses: extenda/actions/conventional-release@v0
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: extenda/actions/setup-gcloud@v0
        with:
          service-account-key: ${{ secrets.GCLOUD_AUTH_STAGING }}

      - name: Add tag in GCR
        run: |
          gcloud container images add-tag \
            eu.gcr.io/extenda/${{ secrets.GCR_image_name }}:${{ github.sha }} \
            eu.gcr.io/extenda/${{ secrets.GCR_image_name }}:${{ steps.release.outputs.version }}
      
      - name: Notify Slack if failed
        if: failure()
        uses: extenda/actions/slack-notify@v0
        with:
          text: |
            *Build failed for ${{ github.repository }}: ${{ github.workflow }}* :heavy_exclamation_mark:
            Build failed on ${{ github.event_name }} event. Workflow: ${{ github.workflow }}. Job: ${{github.job}}. Run id: <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.run_id }}>
          channel: ${{ secrets.slack-channel }}
          service-account-key: ${{ secrets.SECRET_AUTH }}
