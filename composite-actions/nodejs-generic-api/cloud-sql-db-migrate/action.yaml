name: 'Run database migration'
description: 'Run database migration for the service'
on:
  push:
    branches:
      - main
      - master
inputs:
  IMAGE_NAME:
    description: 'Image name to build and test on'
    required: true
  SECRET_AUTH:
    description: 'Auth for Nexus registry'
    required: true
  GCLOUD_AUTH:
    description: 'GCP Auth'
    required: true
  db_host_secret_name:
    description: 'Key name of the database host in gcp secret manager'
    required: true
  db_port_secret_name:
    description: 'Key name of the database port in gcp secret manager'
    required: true
  db_name_secret_name:
    description: 'Key name of the database name in gcp secret manager'
    required: true
  db_user_secret_name:
    description: 'Key name of the database user in gcp secret manager'
    required: true
  db_pass_secret_name:
    description: 'Key name of the database password in gcp secret manager'
    required: true
runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3

    - name: Install Node
      uses: actions/setup-node@v2
      with:
        node-version: 16

    - name: Auth to Nexus npm registry
      uses: extenda/actions/nexus-auth-npm@v0
      with:
        service-account-key: ${{ inputs.SECRET_AUTH }}

    - name: Install dependencies
      if: steps.cache-node-modules.outputs.cache-hit != 'true'
      shell: bash
      run: npm ci

    - uses: extenda/actions/setup-gcloud@v0
      id: gcloud
      with:
        service-account-key: ${{ inputs.GCLOUD_AUTH }}
        export-default-credentials: true

    - name: GCloud configure-docker
      shell: bash
      run: gcloud --quiet auth configure-docker eu.gcr.io

    - uses: extenda/actions/gcp-secret-manager@v0
      with:
        service-account-key: ${{ inputs.GCLOUD_AUTH }}
        secrets: |
          DB_HOST: ${{ inputs.db_host_secret_name }}
          DB_NAME: ${{ inputs.db_name_secret_name }}
          DB_USER: ${{ inputs.db_user_secret_name }}
          DB_PASS: ${{ inputs.db_pass_secret_name }}

    - name: Enable cloud SQL proxy to instance
      shell: bash
      run: |
        curl -o cloud-sql-proxy https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.7.0/cloud-sql-proxy.linux.amd64
        chmod +x cloud-sql-proxy
        nohup ./cloud-sql-proxy ${{ env.DB_HOST }} > cloud-sql-proxy.out 2> cloud-sql-proxy.err < /dev/null &
        echo $!
        echo CLOUD_SQL_PROXY_PID=$(echo $!) >> $GITHUB_ENV

    - name: Migrate DB
      shell: bash
      run: |
        npm run db-migrate
      env:
        DB_HOST: 127.0.0.1
        DB_NAME: ${{ env.DB_NAME }}
        DB_USER: ${{ env.DB_USER }}
        DB_PASS: ${{ env.DB_PASS }}
        DB_PORT: 5432

    - name: Kill Cloud SQL Proxy
      shell: bash
      run: kill $CLOUD_SQL_PROXY_PID

    - name: Print CloudSQL proxy logs
      if:  failure()
      shell: bash
      env:
        DB_HOST: ${{ env.DB_HOST }}
      run: |
        echo "connection name $DB_HOST" | base64 | base64
        echo "****cloud-sql-proxy.out****"
        cat cloud-sql-proxy.out
        echo "****cloud-sql-proxy.err****"
        cat cloud-sql-proxy.err
        
