name: "Run unit tests"
description: "Run unit tests for the service"
inputs:
  SECRET_AUTH:
    description: "GCP Auth"
    required: true
  GCLOUD_AUTH:
    description: "GCP Auth (staging)"
    required: false
  slack-channel:
    description: Name of the channel to notify failing action
    required: false
  notify-slack-on-fail:
    description: "If true notifies slack channel specified in secrets in case this workflow fails"
    default: false
    type: boolean
    required: false
runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4

    - name: Cache node_modules
      uses: actions/cache@v4
      id: cache-node-modules
      env:
        cache-name: cache-node-modules
      with:
        path: node_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-modules

    - name: Copy test .env files
      shell: bash
      run: cp test/example.env .env
    - name: Copy .env files
      shell: bash
      run: find . -type f -name '*example.env' -execdir mv {} .env ';'

    - uses: extenda/actions/setup-gcloud@v0
      id: gcloud
      with:
        service-account-key: ${{ inputs.GCLOUD_AUTH }}

    - name: GCloud configure-docker
      shell: bash
      run: gcloud --quiet auth configure-docker eu.gcr.io

    - name: Start Emulators
      shell: bash
      run: npm run emulators:start --if-present

    - name: Cache Sonar binary
      uses: actions/cache@v4
      env:
        cache-name: cache-sonar-binary
      with:
        path: /home/runner/.sonar/native-sonar-scanner
        key: ${{ runner.os }}-cache-sonar-binary
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}

    - name: Install Node
      uses: actions/setup-node@v4
      with:
        node-version-file: .nvmrc

    - name: Auth to Nexus npm registry
      uses: extenda/actions/nexus-auth-npm@v0
      with:
        service-account-key: ${{ inputs.SECRET_AUTH }}

    - name: Install dependencies
      if: steps.cache-node-modules.outputs.cache-hit != 'true'
      shell: bash
      run: npm ci

    - name: Check OpenAPI schema updates
      shell: bash
      run: npm run check-openapi-schema --if-present

    - name: Lint
      shell: bash
      run: npm run lint:ci

    - name: Run type check
      shell: bash
      run: npm run ts:check --if-present

    - name: Run unit tests with coverage
      shell: bash
      run: npm run test:cov

    - name: Analyze with SonarCloud
      uses: extenda/actions/sonar-scanner@v0
      with:
        sonar-host: https://sonarcloud.io
        service-account-key: ${{ inputs.SECRET_AUTH }}
        sonar-scanner: node

    - name: 'Qodana Scan'
      uses: JetBrains/qodana-action@v2024.2
      with:
        args: --coverage-dir,src,--baseline,qodana.sarif.json
      env:
        QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}

    - name: Notify Slack if failed
      if: ${{ github.ref == 'refs/heads/master' && failure() && inputs.notify-slack-on-fail }}
      uses: extenda/actions/slack-notify@v0
      with:
        text: |
          *Unit test failed for ${{ github.repository }}: ${{ github.workflow }}* :heavy_exclamation_mark:
          Test failed on ${{ github.event_name }} event. Workflow: ${{ github.workflow }}. Job: ${{github.job}}. Run id: <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.run_id }}>
        channel: ${{ inputs.slack-channel }}
        service-account-key: ${{ inputs.GCLOUD_AUTH || inputs.SECRET_AUTH }}
